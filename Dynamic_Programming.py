# 다이나믹 프로그래밍(피보나치 수열에 주로 사용)
# 피보나치 수열을 그저 재귀함수를 이용해 계산하려하면 2의 n 제곱의 시간복잡도가 나온다
# 다이나믹 프로그래밍을 사용할 수 있는 조건
# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

# 메모이제이션이란, 다이나믹 프로그램ㅇ을 구현하는 방법 중 한 종류로,
# 한번 구한 결과를 메모리 공간에 메모하두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법을 의미한다.
# 캐싱이라고도 한다.

d = [0] * 100


def fibo(x):
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]


print(fibo(99))
# 다이나믹 시간복잡도 O(N)
# but, 그리하더라도 재귀함수를 이용하면 1을 리턴한 함수에 한해서 오버헤드가 발생할 수 있다.
# 이를 막기위해서는 재귀함수 대신에 반복문을 사용하면 된다.
# 아래는 반복문을 이용한 다이나믹 시간 복잡도

d = [0] * 100
d[1] = 1
d[2] = 1

n = 99

for i in range(3, n+1):
    d[i] = d[i - 1] + d[i - 2]

print(d[n])

# 재귀함수를 이용하여 다이나믹 프로그래밍 소스를 작성하는 방법을 큰 문제를 해결하기 위해 작은 문제를 호출한다고 하여 탑다운 방식이라하고,
# 반복문을 이용하여 작은 문제부터 차근차근 답을 도출하는 방법을 보텀업 방식이라한다.
# 보텀업 방식에서 사용하는 결과 저장용 리스트는 DP 테이블이라 하며, 메모이제이션은 탑다운 방식에 국한되어 사용되는 표현이다.
# 메모이제이션 : 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념

# 가능하다면 탑다운 보다는 바텀업 방식을 구현하는 것이 좋다
# 탑다운 방식은 재귀함수의 스택에 한계가 있기에 오류가 발생할 수 있다.
