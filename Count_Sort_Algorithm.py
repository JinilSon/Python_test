# 계수 정렬 알고리즘
# 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠른 정렬 알고리즘
# 데이터의 개수 N, 데이터 중 최댓값 K일때,
# 최악의 경우에도 수행 시간 O(N + K)를 보장한다.
# but, 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용할 수 있다.
# 일반적으로 가장 큰 데이터와 가장 작은 데이터의 차이가 1000000을 넘지 않을 때 효과적으로 사용할 수 있다.
# 계수 정렬이 이러한 특징을 가지는 이유는 모든 범위를 담을 수 있는 크기의 리스트를 선언해야 하기 때문이다.
# 계수 정렬이 이전의 3가지와 같이 직접 데이터의 값을 비교한 뒤에 위치를 변경하며 정렬하는 방식
# 선택, 삽입, 퀵 정렬(비교 기반의 정렬 알고리즘)
# 현존하는 정렬 알고리즘 중 계수 정렬과 기수 정렬이 가장 빠른 수행 시간을 가진다.qQ

array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
# 0부터 최댓값까지의 카운팅 룸을 생성한다.
count = [0] * (max(array) + 1)

# array 배열에서 해당 숫자가 카운트 되면, count 배열의 해당 원소의 값을 1 증가시킨다
for i in range(len(array)):
    count[array[i]] += 1

# 마지막으로 count 배열 원소의 인덱스와 해당 원소의 값을 print 시킨다.
for i in range(len(count)):
    for j in range(count[i]):
        print(i, end=' ')

